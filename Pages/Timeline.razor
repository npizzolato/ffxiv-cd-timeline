@page "/timeline/{bossName}/{id}"
@using System.Web;

@inject BossDataProvider BossDataProvider
@inject JobDataProvider JobDataProvider
@inject BlobTimelineSaver TimelineSaver

@if (this.timeline == null)
{
    <p><em>Loading</em></p>
}
else 
{    
    <h1 class="display-4">
        @this.timeline.BossTimeline.FullName
    </h1>

    <button class="btn btn-secondary" @onclick="ToggleDetailedTimeline">
        @this.ButtonText
    </button>

    <div>
        Add a job to the timeline: <select class="custom-select" @bind="this.selectedJob">
            <option value="">Select job</option>
            @for (int i = 0; i < this.availableJobs.Count; i++)
            {
                <option value="@this.availableJobs[i]">@this.availableJobs[i]</option>
            }
        </select> 
        <button class="btn btn-secondary" @onclick="AddJobAsync">
            Add @this.selectedJob
        </button>
    </div>

    <div>
        <button class="btn btn-primary" @onclick="SaveAsync">
            Save Mit Plan
        </button>

        @if (this.mitPlanLink != null)
        {
            <a href="@this.mitPlanLink" class="link-primary">Saved!</a>
        }
    </div>

    <table class="table table-striped tableFixHead">
        <thead>
            <tr>
                <th scope="col" rowspan="2">Time</th>
                <th scope="col" rowspan="2">Ability</th>
                @foreach (var job in this.timeline.Jobs)
                {
                    var columnSpan = job.JobData.Abilities.Count;
                    <th scope="col" colspan="@columnSpan" style="text-align:center">
                        @job.JobData.Name
                        <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveJobAsync(job)">
                            <!-- Bootstrap X - https://icons.getbootstrap.com/icons/x/ -->
                            <!-- Using <i> isn't working. Not initializing css/svg correctly? -->
                            <!-- Should just be able to do <i class="bi bi-x" /> in place of the svg -->
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                            </svg>
                        </button>
                    </th>
                }
            </tr>
            <tr>
                @foreach (var job in this.timeline.Jobs)
                {
                    @foreach (var ability in job.JobData.Abilities)
                    {
                        <th scope="col" class="row2"><img src="@ability.Icon" height="40" width="40" title="@ability.Name" /></th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @{
                var range = this.showDetailedTimeline ? this.timeline.GetTimelineRange() : this.timeline.GetImportantTimelinePoints();
            }
            @foreach (TimeSpan second in range)
            {
                BossTimelineEntry entry = this.timeline.BossTimeline.Timeline.Find(e => e.EffectTime == second);
                var abilityInfo = entry == null ? null : this.timeline.BossTimeline.Abilities.Find(a => a.Name.Equals(entry.Name));
                string helpText = abilityInfo?.Description;

                <tr scope="row">
                    <td>@second.ToString(@"mm\:ss")</td>
                    <td scope="row" class="@abilityInfo?.Category">
                        @entry?.Name
                        @if (!string.IsNullOrEmpty(helpText))
                        {
                            <div class="tooltip-wrapper" style='padding-left:5px'>
                                <span>@helpText</span>
                                <!-- Bootstrap Info Circle - https://icons.getbootstrap.com/icons/info-circle/ -->
                                <!-- Using <i> isn't working. Not initializing css/svg correctly? -->
                                <!-- Should just be able to do <i class="bi bi-info-circle" /> in place of the svg -->
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z" />
                                </svg>
                            </div>
                        }
                        @if (abilityInfo != null && abilityInfo.DamageType != DamageType.Unknown)
                        {
                            @if (abilityInfo.DamageType == DamageType.Physical)
                            {
                                <img src="physical-damage.jpg" style="height: 25px; padding-left:5px" alt="[Physical Damage]" />
                            }
                            
                            @if (abilityInfo.DamageType == DamageType.Magical)
                            {
                                <img src="magic-damage.jpg" style="height: 25px; padding-left:5px" alt="[Magical Damage]" />
                            }
                        }
                    </td>
                    @foreach (var job in this.timeline.Jobs)
                    {
                        @foreach (var ability in job.JobData.Abilities)
                        {
                            var status = this.timeline.GetAbilityTimeline(job, ability.Name).GetAbilityStatus(second);
                            bool isCasting = this.timeline.GetAbilityTimeline(job, ability.Name).IsCastingAt(second);

                            <td scope="row" class="@status">
                                @if (status == JobAbilityStatus.Available || isCasting)
                                {
                                    <input type="checkbox" checked="@isCasting" @onchange="(eventArgs) => HandleJobAbilityEntryChanged(eventArgs.Value, second, job, ability)"></input>
                                    <!-- <p>@status</p> --> <!-- Useful for seeing the underlying status -->
                                }
                                else 
                                {
                                    <!-- <p>@status</p> --> <!-- Useful for seeing the underlying status -->
                                }
                            </td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private MitigationTimeline timeline;

    private List<string> availableJobs;

    private bool showDetailedTimeline = false;
    private string selectedJob;
    private string mitPlanLink;

    [Parameter] public string BossName { get; set; }

    [Parameter] public string Id { get; set; }

    public Guid TimelineId => Guid.Parse(this.Id);

    public string ButtonText => this.showDetailedTimeline ? "Show simplified timeline" : "Show detailed timeline";

    protected override async Task OnInitializedAsync()
    {
        var bossTimeline = await this.BossDataProvider.GetBossTimelineAsync(this.BossName);
        Console.WriteLine($"Loaded {bossTimeline.Abilities.Count()} abilities and {bossTimeline.Timeline.Count()} actions for boss {bossTimeline.ShortName}.");

        this.availableJobs = this.JobDataProvider.GetJobs(bossTimeline.Level).ToList();

        this.timeline = new MitigationTimeline(this.TimelineId, bossTimeline);
        /*
        if (await this.TimelineSaver.TimelineExistsAsync(this.TimelineId))
        {
            await this.LoadSavedMitPlanAsync();
        }
        else
        {
            this.timeline = new MitigationTimeline(this.TimelineId, bossTimeline);
        }*/
    }

    private void ToggleDetailedTimeline()
    {
        if (this.showDetailedTimeline)
        {
            this.showDetailedTimeline = false;
        }
        else 
        {
            this.showDetailedTimeline = true;
        }
    }

    private async Task AddJobAsync()
    {
        var jobData = await this.JobDataProvider.GetJobDataAsync(this.selectedJob, this.timeline.BossTimeline.Level);
        this.timeline.AddJob(jobData);
    }

    private Task RemoveJobAsync(JobInstance job)
    {
        this.timeline.RemoveJob(job);
        return Task.CompletedTask;
    }

    private async Task SaveAsync()
    {
        this.mitPlanLink = null;
        await this.TimelineSaver.SaveTimelineAsync(this.timeline);
        this.mitPlanLink = "dummy"; //$"/timeline/{this.BossName}/{HttpUtility.UrlEncode(savedTimeline)}";
    }
    
    private async Task LoadSavedMitPlanAsync()
    {
        this.timeline = await this.TimelineSaver.LoadTimelineAsync(this.TimelineId);
    }
    
    private void HandleJobAbilityEntryChanged(object checkedValue, TimeSpan entryTime, JobInstance job, JobAbility ability)
    {
        Console.WriteLine($"{checkedValue}: {entryTime} | {job.Id} | {job.JobData.Name} | {ability.Name}");

        if ((bool)checkedValue)
        {
            this.AddJobAbilityEntry(entryTime, job, ability);
        }
        else 
        {
            this.RemoveJobAbilityEntry(entryTime, job, ability);
        }
    }

    private void AddJobAbilityEntry(TimeSpan entryTime, JobInstance job, JobAbility ability)
    {
        this.timeline.GetAbilityTimeline(job, ability.Name).AddAbilityUse(entryTime);
    }

    private void RemoveJobAbilityEntry(TimeSpan entryTime, JobInstance job, JobAbility ability)
    {
        this.timeline.GetAbilityTimeline(job, ability.Name).RemoveAbiityUse(entryTime);
    }
}

<!-- 
    I'm supposed to be able to use CSS Isolation (https://docs.microsoft.com/en-us/aspnet/core/blazor/components/css-isolation?view=aspnetcore-6.0) 
    to define this in a Timeline.razor.css file, but that doesn't seem to be working. The class is applied correctly but there isn't any css applied. 
    Sticking with this approach for now to unblock. 
-->
<style>
<!-- OnCooldown color taken from xivanalysis. Complementary colors taken from https://www.canva.com/colors/color-wheel/ -->
td.Unavailable {
    background-color: #FBEEF1;
}

.Unavailable{
    background-color: #FBEEF1;
}

td.Active {
    background-color: #F1FBEE;
}

td.OnCooldown {
    background-color: #EEF1FB;
}

td {
    text-align: center;
}

th {
    text-align: center;
}

td.RaidDamage {
    color: #FF0000;
    font-weight: bold;
}

td.TankDamage {
    color: #FFA525;
    font-weight: bold;
}

td.Adds {
    color: #8E569B;
}

td.Mechanics {
    color: #8E569B;
}

td.AvoidableDamage {
    color: #00B034;
}

td.SharedDamage {
    color: #479BBE;
    font-weight: bold;
}

.tableFixHead { 
    overflow: auto; 
    height: 100px; 
}

.tableFixHead thead th { 
    position: sticky; 
    top: 50px; 
    z-index: 1; 
    background-color: #E3F2FD; <!-- Matches nav bar color -->
}

.tableFixHead thead th.row2 { 
    position: sticky; 
    top: 90px; 
    z-index: 1; 
}

.tooltip-wrapper {
    position: relative;
    display: inline-block;
    cursor: help;
}

.tooltip-wrapper span {
    visibility: hidden;
    position: absolute;
    width: 120px;
    bottom: 100%;
    left: 50%;
    margin-left: -60px;
    background-color: #363636;
    color: #fff;
    text-align: center;
    padding: 5px;
    border-radius: 6px;
    z-index: 1;
}

.tooltip-wrapper span::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: #555 transparent transparent transparent;
}

.tooltip-wrapper:hover span {
    visibility: visible;
}

</style>