@page "/timeline/{bossName}/"
@page "/timeline/{bossName}/{savedMitPlan}"

@inject BossDataProvider BossDataProvider
@inject JobDataProvider JobDataProvider
@inject TimelineSaver TimelineSaver

@if (this.timeline == null)
{
    <p><em>Loading</em></p>
}
else 
{    
    <h1>
        @this.timeline.BossTimeline.FullName
    </h1>

    <div>
        Loaded @this.timeline.BossTimeline.Abilities.Count() abilities and @this.timeline.BossTimeline.Timeline.Count() actions for boss @this.timeline.BossTimeline.ShortName.
    </div>

    <button class="btn btn-secondary" @onclick="ToggleDetailedTimeline">
        @this.ButtonText
    </button>

    <div>
        Add a job to the timeline: <select class="custom-select" @bind="this.selectedJob">
            <option value="">Select job</option>
            @for (int i = 0; i < this.availableJobs.Count; i++)
            {
                <option value="@this.availableJobs[i]">@this.availableJobs[i]</option>
            }
        </select> 
        <button class="btn btn-secondary" @onclick="AddJobAsync">
            Add @this.selectedJob
        </button>
    </div>

    <div>
        <button class="btn btn-primary" @onclick="Save">
            Save Mit Plan
        </button>

        @if (this.mitPlanLink != null)
        {
            <a href="@this.mitPlanLink">Click me!</a>
        }
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col" rowspan="2">Time</th>
                <th scope="col" rowspan="2">Ability</th>
                @foreach (var job in this.timeline.Jobs)
                {
                    var columnSpan = job.JobData.Abilities.Count;
                    <th scope="col" colspan="@columnSpan" style="text-align:center">@job.JobData.Name</th>
                }
            </tr>
            <tr>
                @foreach (var job in this.timeline.Jobs)
                {
                    @foreach (var ability in job.JobData.Abilities)
                    {
                        <th scope="col">@ability.Name</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @{
                var range = this.showDetailedTimeline ? this.timeline.GetTimelineRange() : this.timeline.GetImportantTimelinePoints();
            }
            @foreach (TimeSpan second in range)
            {
                BossTimelineEntry entry = this.timeline.BossTimeline.Timeline.Find(e => e.EffectTime == second);
                var abilityInfo = entry == null ? null : this.timeline.BossTimeline.Abilities.Find(a => a.Name.Equals(entry.Name));
                string helpText = abilityInfo?.Description;

                <tr scope="row">
                    <td>@second.ToString(@"mm\:ss")</td>
                    <td scope="row" class="@abilityInfo?.Category">
                        @entry?.Name
                        @if (!string.IsNullOrEmpty(helpText))
                        {
                            <Tooltip Text=@helpText><i class="bi bi-info-circle" style='padding-left:5px'></i></Tooltip>
                        }
                        @if (abilityInfo != null && abilityInfo.DamageType != DamageType.Unknown)
                        {
                            @if (abilityInfo.DamageType == DamageType.Physical)
                            {
                                <img src="physical-damage.jpg" style="height: 25px; padding-left:5px" alt="[Physical Damage]" />
                            }
                            
                            @if (abilityInfo.DamageType == DamageType.Magical)
                            {
                                <img src="magic-damage.jpg" style="height: 25px; padding-left:5px" alt="[Magical Damage]" />
                            }
                        }
                    </td>
                    @foreach (var job in this.timeline.Jobs)
                    {
                        @foreach (var ability in job.JobData.Abilities)
                        {
                            var status = this.timeline.GetAbilityTimeline(job, ability.Name).GetAbilityStatus(second);
                            bool isCasting = this.timeline.GetAbilityTimeline(job, ability.Name).IsCastingAt(second);

                            <td scope="row" class="@status">
                                @if (status == JobAbilityStatus.Available || isCasting)
                                {
                                    <input type="checkbox" checked="@isCasting" @onchange="(eventArgs) => HandleJobAbilityEntryChanged(eventArgs.Value, second, job, ability)"></input>
                                    <!-- <p>@status</p> --> <!-- Useful for seeing the underlying status -->
                                }
                                else 
                                {
                                    <!-- <p>@status</p> --> <!-- Useful for seeing the underlying status -->
                                }
                            </td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private MitigationTimeline timeline;

    private List<string> availableJobs;

    private bool showDetailedTimeline = false;
    private string selectedJob;
    private string mitPlanLink;

    [Parameter] public string BossName { get; set; }

    [Parameter] public string SavedMitPlan { get; set; }

    public string ButtonText => this.showDetailedTimeline ? "Show simplified timeline" : "Show detailed timeline";

    protected override async Task OnInitializedAsync()
    {
        var bossTimeline = await this.BossDataProvider.GetBossTimelineAsync(this.BossName);

        this.availableJobs = this.JobDataProvider.GetJobs(bossTimeline.Level).ToList();
        
        if (!string.IsNullOrWhiteSpace(this.SavedMitPlan))
        {
            this.LoadSavedMitPlan();
        }
        else 
        {
            this.timeline = new MitigationTimeline(bossTimeline);
        }
    }

    private void ToggleDetailedTimeline()
    {
        if (this.showDetailedTimeline)
        {
            this.showDetailedTimeline = false;
        }
        else 
        {
            this.showDetailedTimeline = true;
        }
    }

    private async Task AddJobAsync()
    {
        var jobData = await this.JobDataProvider.GetJobDataAsync(this.selectedJob, this.timeline.BossTimeline.Level);
        this.timeline.AddJob(jobData);
    }

    private void Save()
    {
        string savedTimeline = this.TimelineSaver.SaveTimeline(this.timeline);
        this.mitPlanLink =$"/timeline/{this.BossName}/{HttpUtility.UrlEncode(savedTimeline)}";
    }
    
    private void LoadSavedMitPlan()
    {
        this.timeline = this.TimelineSaver.LoadTimeline(this.SavedMitPlan);
    }
    
    private void HandleJobAbilityEntryChanged(object checkedValue, TimeSpan entryTime, JobInstance job, JobAbility ability)
    {
        Console.WriteLine($"{checkedValue}: {entryTime} | {job.Id} | {job.JobData.Name} | {ability.Name}");

        if ((bool)checkedValue)
        {
            this.AddJobAbilityEntry(entryTime, job, ability);
        }
        else 
        {
            this.RemoveJobAbilityEntry(entryTime, job, ability);
        }
    }

    private void AddJobAbilityEntry(TimeSpan entryTime, JobInstance job, JobAbility ability)
    {
        this.timeline.GetAbilityTimeline(job, ability.Name).AddAbilityUse(entryTime);
    }

    private void RemoveJobAbilityEntry(TimeSpan entryTime, JobInstance job, JobAbility ability)
    {
        this.timeline.GetAbilityTimeline(job, ability.Name).RemoveAbiityUse(entryTime);
    }
}

<!-- 
    I'm supposed to be able to use CSS Isolation (https://docs.microsoft.com/en-us/aspnet/core/blazor/components/css-isolation?view=aspnetcore-6.0) 
    to define this in a Timeline.razor.css file, but that doesn't seem to be working. The class is applied correctly but there isn't any css applied. 
    Sticking with this approach for now to unblock. 
-->
<style>
<!-- OnCooldown color taken from xivanalysis. Complementary colors taken from https://www.canva.com/colors/color-wheel/ -->
td.Unavailable {
    background-color: #FBEEF1;
}

.Unavailable{
    background-color: #FBEEF1;
}

td.Active {
    background-color: #F1FBEE;
}

td.OnCooldown {
    background-color: #EEF1FB;
}

td {
    text-align: center;
}

th {
    text-align: center;
}

td.RaidDamage {
    color: #FF0000;
    font-weight: bold;
}

td.TankDamage {
    color: #FFA525;
    font-weight: bold;
}

td.Adds {
    color: #8E569B;
}

td.AvoidableDamage {
    color: #00B034;
}

</style>