@page "/timeline/{bossName}"

@inject BossDataProvider BossDataProvider
@inject JobDataProvider JobDataProvider

@if (this.bossTimeline == null)
{
    <p><em>Loading</em></p>
}
else 
{    
    <h1>
        @this.bossTimeline.FullName
    </h1>

    <div>
        Loaded @this.bossTimeline.Abilities.Count() abilities and @this.bossTimeline.Timeline.Count() actions for boss @this.bossTimeline.ShortName.
    </div>

    <button class="btn btn-secondary" @onclick="ToggleDetailedTimeline">
        @this.ButtonText
    </button>

    <div>
        Add a job to the timeline: <select class="custom-select" @bind="this.selectedJob">
            <option value="">Select job</option>
            @for (int i = 0; i < this.availableJobs.Count; i++)
            {
                <option value="@this.availableJobs[i]">@this.availableJobs[i]</option>
            }
        </select> 
        <button class="btn btn-secondary" @onclick="AddJobAsync">
            Add @this.selectedJob
        </button>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col" rowspan="2">Time</th>
                <th scope="col" rowspan="2">Ability</th>
                @foreach (var job in this.jobs)
                {
                    var columnSpan = job.Abilities.Count;
                    <th scope="col" colspan="@columnSpan" style="text-align:center">@job.Name</th>
                }
            </tr>
            <tr>
                @foreach (var job in this.jobs)
                {
                    @foreach (var ability in job.Abilities.OrderBy(a => a.Type))
                    {
                        <th scope="col">@ability.Name</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @if (this.showDetailedTimeline)
            {
                @foreach (TimeSpan second in Enumerable.Range(0, Convert.ToInt32(this.bossTimeline.Timeline.Last().EffectTime.TotalSeconds))
                    .Select(multiplier => TimeSpan.Zero.Add(TimeSpan.FromSeconds(1 * multiplier))))
                {
                    BossTimelineEntry entry = this.bossTimeline.Timeline.Find(e => e.EffectTime == second);
                    var helpText = entry == null ? null : this.bossTimeline.Abilities.Find(a => a.Name.Equals(entry.Name))?.Description;

                    <tr scope="row">
                        <td>@second.ToString(@"mm\:ss")</td>
                        <td scope="row">
                            @entry?.Name
                            @if (!string.IsNullOrEmpty(helpText))
                            {
                                <Tooltip Text=@helpText><i class="bi bi-info-circle" style='padding-left:5px'></i></Tooltip>
                            }
                        </td>
                        @foreach (var job in this.jobs)
                        {
                            @foreach (var ability in job.Abilities)
                            {
                                var currentSecond = second;
                                var currentJob = job;
                                var currentAbility = ability;
                                <td scope="row"><input type="checkbox" @onchange="(eventArgs) => HandleJobAbilityEntryChanged(eventArgs.Value, currentSecond, currentJob, currentAbility)"></input></td>
                            }
                        }
                    </tr>
                }
            }
            else 
            {
                @foreach (var entry in this.bossTimeline.Timeline)
                {
                    var helpText = this.bossTimeline.Abilities.Find(a => a.Name.Equals(entry.Name))?.Description;
                    <tr>
                        <td scope="row">@entry.EffectTime.ToString(@"mm\:ss")</td>
                        <td scope="row">
                            @entry.Name
                            @if (!string.IsNullOrEmpty(helpText))
                            {
                                <Tooltip Text=@helpText><i class="bi bi-info-circle" style='padding-left:5px'></i></Tooltip>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private BossTimeline bossTimeline;
    private List<string> availableJobs;
    private List<Job> jobs = new List<Job>();

    private bool showDetailedTimeline = false;
    private string selectedJob;

    [Parameter] public string BossName { get; set; }

    public string ButtonText => this.showDetailedTimeline ? "Show basic timeline" : "Show detailed timeline";

    protected override async Task OnInitializedAsync()
    {
        this.bossTimeline = await this.BossDataProvider.GetBossTimelineAsync(this.BossName);
        this.availableJobs = this.JobDataProvider.GetJobs().ToList();
    }

    private void ToggleDetailedTimeline()
    {
        if (this.showDetailedTimeline)
        {
            this.showDetailedTimeline = false;
        }
        else 
        {
            this.showDetailedTimeline = true;
        }
    }

    private async Task AddJobAsync()
    {
        var jobData = await this.JobDataProvider.GetJobDataAsync(this.selectedJob);
        this.jobs.Add(jobData);
    }
    
    private void HandleJobAbilityEntryChanged(object checkedValue, TimeSpan entryTime, Job job, JobAbility ability)
    {
        Console.WriteLine($"{checkedValue}: {entryTime} | {job.Name} | {ability.Name}");

        if ((bool)checkedValue)
        {
            this.AddJobAbilityEntry(entryTime, job, ability);
        }
        else 
        {
            this.RemoveJobAbilityEntry(entryTime, job, ability);
        }
    }

    private void AddJobAbilityEntry(TimeSpan entryTime, Job job, JobAbility ability)
    {
        job.AbilityTimeline.Add(
            new JobTimelineEntry()
            {
                CastTime = entryTime,
                AbilityName = ability.Name
            });
    }

    private void RemoveJobAbilityEntry(TimeSpan entryTime, Job job, JobAbility ability)
    {
        JobTimelineEntry entry = job.AbilityTimeline.FirstOrDefault(e => e.CastTime == entryTime && e.AbilityName.Equals(ability.Name));
        
        if (entry != null)
        {
            job.AbilityTimeline.Remove(entry);
        }
    }
}