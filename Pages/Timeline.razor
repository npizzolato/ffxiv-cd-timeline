@page "/timeline/{bossName}"

@inject BossDataProvider BossDataProvider
@inject JobDataProvider JobDataProvider

@if (this.timeline == null)
{
    <p><em>Loading</em></p>
}
else 
{    
    <h1>
        @this.timeline.BossTimeline.FullName
    </h1>

    <div>
        Loaded @this.timeline.BossTimeline.Abilities.Count() abilities and @this.timeline.BossTimeline.Timeline.Count() actions for boss @this.timeline.BossTimeline.ShortName.
    </div>

    <button class="btn btn-secondary" @onclick="ToggleDetailedTimeline">
        @this.ButtonText
    </button>

    <div>
        Add a job to the timeline: <select class="custom-select" @bind="this.selectedJob">
            <option value="">Select job</option>
            @for (int i = 0; i < this.availableJobs.Count; i++)
            {
                <option value="@this.availableJobs[i]">@this.availableJobs[i]</option>
            }
        </select> 
        <button class="btn btn-secondary" @onclick="AddJobAsync">
            Add @this.selectedJob
        </button>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col" rowspan="2">Time</th>
                <th scope="col" rowspan="2">Ability</th>
                @foreach (var job in this.timeline.Jobs)
                {
                    var columnSpan = job.JobData.Abilities.Count;
                    <th scope="col" colspan="@columnSpan" style="text-align:center">@job.JobData.Name</th>
                }
            </tr>
            <tr>
                @foreach (var job in this.timeline.Jobs)
                {
                    @foreach (var ability in job.JobData.Abilities.OrderBy(a => a.Type))
                    {
                        <th scope="col">@ability.Name</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @if (this.showDetailedTimeline)
            {
                @foreach (TimeSpan second in this.timeline.GetTimelineRange())
                {
                    BossTimelineEntry entry = this.timeline.BossTimeline.Timeline.Find(e => e.EffectTime == second);
                    var helpText = entry == null ? null : this.timeline.BossTimeline.Abilities.Find(a => a.Name.Equals(entry.Name))?.Description;

                    <tr scope="row">
                        <td>@second.ToString(@"mm\:ss")</td>
                        <td scope="row">
                            @entry?.Name
                            @if (!string.IsNullOrEmpty(helpText))
                            {
                                <Tooltip Text=@helpText><i class="bi bi-info-circle" style='padding-left:5px'></i></Tooltip>
                            }
                        </td>
                        @foreach (var job in this.timeline.Jobs)
                        {
                            @foreach (var ability in job.JobData.Abilities)
                            {
                                var status = this.timeline.JobAbilityTimelines[job.Id][ability.Name].AvailabilityTimeline[second];
                                bool isCasting = this.timeline.JobAbilityTimelines[job.Id][ability.Name].AbilityUses.Any(use => use.CastTime == second);

                                <td scope="row" class="@status">
                                    @if (status == JobAbilityStatus.Available || isCasting)
                                    {
                                        <input type="checkbox" @onchange="(eventArgs) => HandleJobAbilityEntryChanged(eventArgs.Value, second, job, ability)"></input>
                                        <!-- <p>@status</p> --> <!-- Useful for seeing the underlying status -->
                                    }
                                    else 
                                    {
                                        <!-- <p>@status</p> --> <!-- Useful for seeing the underlying status -->
                                    }
                                </td>
                            }
                        }
                    </tr>
                }
            }
            else 
            {
                <!-- This needs to be updated to filter on all timespans with entries in the timeline (boss abilities and job abilities) -->
                @foreach (var entry in this.timeline.BossTimeline.Timeline)
                {
                    var helpText = this.timeline.BossTimeline.Abilities.Find(a => a.Name.Equals(entry.Name))?.Description;
                    <tr>
                        <td scope="row">@entry.EffectTime.ToString(@"mm\:ss")</td>
                        <td scope="row">
                            @entry.Name
                            @if (!string.IsNullOrEmpty(helpText))
                            {
                                <Tooltip Text=@helpText><i class="bi bi-info-circle" style='padding-left:5px'></i></Tooltip>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private MitigationTimeline timeline;

    private BossTimeline bossTimeline;
    private List<string> availableJobs;

    private bool showDetailedTimeline = false;
    private string selectedJob;

    [Parameter] public string BossName { get; set; }

    public string ButtonText => this.showDetailedTimeline ? "Show basic timeline" : "Show detailed timeline";

    protected override async Task OnInitializedAsync()
    {
        var bossTimeline = await this.BossDataProvider.GetBossTimelineAsync(this.BossName);

        this.timeline = new MitigationTimeline(bossTimeline);

        this.availableJobs = this.JobDataProvider.GetJobs().ToList();
    }

    private void ToggleDetailedTimeline()
    {
        if (this.showDetailedTimeline)
        {
            this.showDetailedTimeline = false;
        }
        else 
        {
            this.showDetailedTimeline = true;
        }
    }

    private async Task AddJobAsync()
    {
        var jobData = await this.JobDataProvider.GetJobDataAsync(this.selectedJob);
        this.timeline.AddJob(jobData);
    }
    
    private void HandleJobAbilityEntryChanged(object checkedValue, TimeSpan entryTime, JobInstance job, JobAbility ability)
    {
        Console.WriteLine($"{checkedValue}: {entryTime} | {job.Id} | {job.JobData.Name} | {ability.Name}");

        if ((bool)checkedValue)
        {
            this.AddJobAbilityEntry(entryTime, job, ability);
        }
        else 
        {
            this.RemoveJobAbilityEntry(entryTime, job, ability);
        }
    }

    private void AddJobAbilityEntry(TimeSpan entryTime, JobInstance job, JobAbility ability)
    {
        this.timeline.JobAbilityTimelines[job.Id][ability.Name].AddAbilityUse(entryTime);
    }

    private void RemoveJobAbilityEntry(TimeSpan entryTime, JobInstance job, JobAbility ability)
    {
        this.timeline.JobAbilityTimelines[job.Id][ability.Name].RemoveAbiityUse(entryTime);
    }

    private string GetStyle(JobAbilityStatus status)
    {
        if (status == JobAbilityStatus.Unavailable)
        {
            return "background-color: palevioletred";
        }

        return "";
    }
}

<!-- 
    I'm supposed to be able to use CSS Isolation (https://docs.microsoft.com/en-us/aspnet/core/blazor/components/css-isolation?view=aspnetcore-6.0) 
    to define this in a Timeline.razor.css file, but that doesn't seem to be working. The class is applied correctly but there isn't any css applied. 
    Sticking with this approach for now to unblock. 
-->
<style>
<!-- OnCooldown color taken from xivanalysis. Complementary colors taken from https://www.canva.com/colors/color-wheel/ -->
td.Unavailable {
    background-color: #FBEEF1;
}

.Unavailable{
    background-color: #FBEEF1;
}

td.Active {
    background-color: #F1FBEE;
}

td.OnCooldown {
    background-color: #EEF1FB;
}
</style>